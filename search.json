[{"path":"https://loelschlaeger.de/ao/articles/ao.html","id":"what-is-alternating-optimization","dir":"Articles","previous_headings":"","what":"What is alternating optimization?","title":"Alternating optimization","text":"Alternating optimization (AO) iterative process optimizing multivariate function breaking simpler sub-problems. involves optimizing one block function parameters keeping others fixed, alternating process among parameter blocks. AO particularly useful sub-problems easier solve original joint optimization problem, natural partitioning parameters. See Bezdek Hathaway (2002), Hu Hathaway (2002), Bezdek Hathaway (2003) details. Consider real-valued objective function f(𝐱,𝐲)f(\\mathbf{x}, \\mathbf{y}) 𝐱\\mathbf{x} 𝐲\\mathbf{y} two blocks function parameters, namely partition parameters. AO process can described follows: Initialization: Start initial guesses 𝐱(0)\\mathbf{x}^{(0)} 𝐲(0)\\mathbf{y}^{(0)}. Iterative Steps: k=0,1,2,…k = 0, 1, 2, \\dots Step 1: Fix 𝐲=𝐲(k)\\mathbf{y} = \\mathbf{y}^{(k)} solve sub-problem 𝐱(k+1)=argmin𝐱f(𝐱,𝐲(k)).\\mathbf{x}^{(k+1)} = \\arg \\min_{\\mathbf{x}} f(\\mathbf{x}, \\mathbf{y}^{(k)}). Step 2: Fix 𝐱=𝐱(k+1)\\mathbf{x} = \\mathbf{x}^{(k+1)} solve sub-problem 𝐲(k+1)=argmin𝐲f(𝐱(k+1),𝐲).\\mathbf{y}^{(k+1)} = \\arg \\min_{\\mathbf{y}} f(\\mathbf{x}^{(k+1)}, \\mathbf{y}). Convergence: Repeat iterative steps convergence criterion met, change objective function parameters falls specified threshold, pre-defined iteration limit reached. AO process can viewed generalization joint optimization, parameter partition trivial, consisting entire parameter vector single block, also used maximization problems simply replacing argmin\\arg \\min argmax\\arg \\max , generalized two parameter blocks, .e., f(𝐱1,𝐱2,…,𝐱n)f(\\mathbf{x}_1, \\mathbf{x}_2, \\ldots, \\mathbf{x}_n), process involves cycling parameter block 𝐱1,𝐱2,…,𝐱n\\mathbf{x}_1, \\mathbf{x}_2, \\ldots, \\mathbf{x}_n solving corresponding sub-problems iteratively (parameter blocks necessarily disjoint), randomized changing parameter partition randomly iteration, can improve convergence rate help avoid getting trapped local optima (Chib Ramamurthy 2010), run multiple processes different initial values, parameter partitions, /base optimizers.","code":""},{"path":"https://loelschlaeger.de/ao/articles/ao.html","id":"how-to-use-the-package","dir":"Articles","previous_headings":"","what":"How to use the package?","title":"Alternating optimization","text":"ao package provides single user-level function, ao(), serves general interface performing various variants AO.","code":""},{"path":"https://loelschlaeger.de/ao/articles/ao.html","id":"the-function-call","dir":"Articles","previous_headings":"How to use the package?","what":"The function call","title":"Alternating optimization","text":"ao() function call default arguments looks follows: arguments following meaning: f: objective function optimized. default, f optimized first argument. optimization target different argument multiple arguments, use npar target, see . Additional arguments f can passed via ... argument usual. initial: Initial values parameters used AO process. gradient hessian: Optional arguments specify analytical gradient /Hessian f. partition: Specifies parameters partitioned optimization. Can one following: \"sequential\": Optimizes parameter block sequentially. similar coordinate descent. \"random\": Randomly partitions parameters iteration. \"none\": partitioning; equivalent joint optimization. Custom partition can defined using list vectors parameter indices, see . new_block_probability minimum_block_number relevant partition = \"random\". case, former controls probability creating new block building random parameter partition, latter defines minimum number parameter blocks partition. minimize: Set TRUE minimization (default), FALSE maximization. lower upper: Lower upper limits constrained optimization. iteration_limit maximum number AO iterations termination, seconds_limit time limit seconds. tolerance_value tolerance_parameter (combination tolerance_parameter_norm) specify two stopping criteria, namely difference current function value current parameter vector one tolerance_history iterations, respectively, becomes smaller thresholds. base_optimizer: Numerical optimizer used solving sub-problems, see . Set verbose TRUE print status messages, hide_warnings FALSE show warning messages AO process. add_details = TRUE adds additional details AO process output.","code":"ao(   f,   initial,   target = NULL,   npar = NULL,   gradient = NULL,   hessian = NULL,   ...,   partition = \"sequential\",   new_block_probability = 0.3,   minimum_block_number = 1,   minimize = TRUE,   lower = NULL,   upper = NULL,   iteration_limit = Inf,   seconds_limit = Inf,   tolerance_value = 1e-6,   tolerance_parameter = 1e-6,   tolerance_parameter_norm = function(x, y) sqrt(sum((x - y)^2)),   tolerance_history = 1,   base_optimizer = Optimizer$new(\"stats::optim\", method = \"L-BFGS-B\"),   verbose = FALSE,   hide_warnings = TRUE,   add_details = TRUE )"},{"path":"https://loelschlaeger.de/ao/articles/ao.html","id":"a-simple-first-example","dir":"Articles","previous_headings":"How to use the package?","what":"A simple first example","title":"Alternating optimization","text":"following implementation Himmelblau’s function f(x,y)=(x2+y−11)2+(x+y2−7)2:f(x, y) = (x^2 + y - 11)^2 + (x + y^2 - 7)^2: function four identical local minima, example x=3x = 3 y=2y = 2:  Minimizing Himmelblau’s function alternating minimization 𝐱\\mathbf{x} 𝐲\\mathbf{y} initial values 𝐱(0)=𝐲(0)=0\\mathbf{x}^{(0)} = \\mathbf{y}^{(0)} = 0 can accomplished follows: , see output AO process, list contains following elements: estimate parameter vector termination. value function value termination. details data.frame full information process: iteration (column iteration) contains function value (column value), parameter values (columns starting p followed parameter index), active parameter block (columns starting b followed parameter index, 1 stands parameter contained active parameter block 0 ), computation times seconds (column seconds). seconds overall computation time seconds. stopping_reason message process terminated.","code":"himmelblau <- function(x) (x[1]^2 + x[2] - 11)^2 + (x[1] + x[2]^2 - 7)^2 himmelblau(c(3, 2)) #> [1] 0 ao(f = himmelblau, initial = c(0, 0)) #> $estimate #> [1]  3.584428 -1.848126 #>  #> $value #> [1] 9.606386e-12 #>  #> $details #>    iteration        value       p1        p2 b1 b2     seconds #> 1          0 1.700000e+02 0.000000  0.000000  0  0 0.000000000 #> 2          1 1.327270e+01 3.395691  0.000000  1  0 0.037379742 #> 3          1 1.743664e+00 3.395691 -1.803183  0  1 0.006797314 #> 4          2 2.847290e-02 3.581412 -1.803183  1  0 0.004172564 #> 5          2 4.687468e-04 3.581412 -1.847412  0  1 0.003583193 #> 6          3 7.368057e-06 3.584381 -1.847412  1  0 0.002924442 #> 7          3 1.164202e-07 3.584381 -1.848115  0  1 0.023872137 #> 8          4 1.893311e-09 3.584427 -1.848115  1  0 0.002409697 #> 9          4 9.153860e-11 3.584427 -1.848124  0  1 0.001838207 #> 10         5 6.347425e-11 3.584428 -1.848124  1  0 0.001840353 #> 11         5 9.606386e-12 3.584428 -1.848126  0  1 0.001929760 #>  #> $seconds #> [1] 0.08674741 #>  #> $stopping_reason #> [1] \"change in function value between 1 iteration is < 1e-06\""},{"path":"https://loelschlaeger.de/ao/articles/ao.html","id":"using-the-analytical-gradient","dir":"Articles","previous_headings":"How to use the package?","what":"Using the analytical gradient","title":"Alternating optimization","text":"Himmelblau’s function, straightforward define analytical gradient follows: gradient function used ao() provided via gradient argument follows: scenarios involving higher dimensions, utilizing analytical gradient can notably improve speed stability process. analytical Hessian can utilized analogously.","code":"gradient <- function(x) {   c(     4 * x[1] * (x[1]^2 + x[2] - 11) + 2 * (x[1] + x[2]^2 - 7),     2 * (x[1]^2 + x[2] - 11) + 4 * x[2] * (x[1] + x[2]^2 - 7)   ) } ao(f = himmelblau, initial = c(0, 0), gradient = gradient, add_details = FALSE) #> $estimate #> [1]  3.584428 -1.848126 #>  #> $value #> [1] 2.659691e-12 #>  #> $seconds #> [1] 0.03387332 #>  #> $stopping_reason #> [1] \"change in function value between 1 iteration is < 1e-06\""},{"path":"https://loelschlaeger.de/ao/articles/ao.html","id":"random-parameter-partitions","dir":"Articles","previous_headings":"How to use the package?","what":"Random parameter partitions","title":"Alternating optimization","text":"Another version AO process involves using new, random partition parameters every iteration. approach can enhance convergence rate prevent stuck local optima. activated setting partition = \"random\". randomness can adjusted using two parameters: new_block_probability determines probability creating new block building new partition. value ranges 0 (blocks created) 1 (parameter single block). minimum_block_number sets minimum number parameter blocks random partitions. , configured 2 avoid generating trivial partitions. random partitions build follows:1 example AO random partitions, consider fitting two-class Gaussian mixture model via maximizing model’s log-likelihood function ℓ(𝛉)=∑=1nlog(λϕμ1,σ12(xi)+(1−λ)ϕμ2,σ22(xi)),\\ell(\\boldsymbol{\\theta}) = \\sum_{=1}^n \\log\\Big( \\lambda \\phi_{\\mu_1, \\sigma_1^2}(x_i) + (1-\\lambda)\\phi_{\\mu_2,\\sigma_2^2} (x_i) \\Big), sum goes observations x1,…,xnx_1, \\dots, x_n, ϕμ1,σ12\\phi_{\\mu_1, \\sigma_1^2} ϕμ2,σ22\\phi_{\\mu_2, \\sigma_2^2} denote normal density first second cluster, respectively, λ\\lambda mixing proportion. parameter vector estimated 𝛉=(μ1,μ2,σ1,σ2,λ)\\boldsymbol{\\theta} = (\\mu_1, \\mu_2, \\sigma_1, \\sigma_2, \\lambda). exists closed-form solution maximum likelihood estimator 𝛉*=argmax𝛉ℓ(𝛉)\\boldsymbol{\\theta}^* = \\arg\\max_{\\boldsymbol{\\theta}} \\ell(\\boldsymbol{\\theta}), apply numerical optimization find function optimum. model fitted following data:2  following function calculates log-likelihood value given parameter vector theta observation vector data:3 ao() call performing alternating maximization random partitions looks follows, simplified output brevity:","code":"process <- ao:::Process$new(   npar = 10,   partition = \"random\",   new_block_probability = 0.5,   minimum_block_number = 2 ) process$get_partition() #> [[1]] #> [1] 5 #>  #> [[2]] #> [1] 1 6 9 #>  #> [[3]] #> [1] 10 #>  #> [[4]] #> [1] 7 #>  #> [[5]] #> [1] 4 8 #>  #> [[6]] #> [1] 2 3 process$get_partition() #> [[1]] #> [1] 1 7 8 #>  #> [[2]] #> [1]  6 10 #>  #> [[3]] #> [1] 3 4 #>  #> [[4]] #> [1] 2 #>  #> [[5]] #> [1] 9 #>  #> [[6]] #> [1] 5 normal_mixture_llk <- function(theta, data) {   mu <- theta[1:2]   sd <- exp(theta[3:4])   lambda <- plogis(theta[5])   c1 <- lambda * dnorm(data, mu[1], sd[1])   c2 <- (1 - lambda) * dnorm(data, mu[2], sd[2])   sum(log(c1 + c2)) } out <- ao(   f = normal_mixture_llk,   initial = runif(5),   data = datasets::faithful$eruptions,   partition = \"random\",   minimize = FALSE ) round(out$details, 2) #>   iteration   value   p1   p2    p3    p4    p5 b1 b2 b3 b4 b5 seconds #> 1         0 -713.98 0.94 0.79  0.97  0.35  0.50  0  0  0  0  0    0.00 #> 2         1 -541.18 0.94 3.81  0.97  0.35  0.50  0  1  0  0  0    0.00 #> 3         1 -512.65 0.94 3.81  0.66 -0.30  0.50  0  0  1  1  0    0.01 #> 4         1 -447.85 3.08 3.81  0.66 -0.30  0.50  1  0  0  0  0    0.00 #> 5         1 -445.29 3.08 3.81  0.66 -0.30 -0.04  0  0  0  0  1    0.00 #> 6         2 -276.36 2.02 4.27 -1.45 -0.83 -0.63  1  1  1  1  1    0.06 #> 7         3 -276.36 2.02 4.27 -1.45 -0.83 -0.63  1  1  1  1  1    0.01"},{"path":"https://loelschlaeger.de/ao/articles/ao.html","id":"more-flexibility","dir":"Articles","previous_headings":"How to use the package?","what":"More flexibility","title":"Alternating optimization","text":"ao package offers flexibility performing AO.4","code":""},{"path":"https://loelschlaeger.de/ao/articles/ao.html","id":"generalized-objective-functions","dir":"Articles","previous_headings":"How to use the package? > More flexibility","what":"Generalized objective functions","title":"Alternating optimization","text":"Optimizers R generally require objective function single target argument must first position, ao allows optimization argument first, one argument. example, say, normal_mixture_llk function following form supposed optimized parameters mu, lsd, llambda: ao(), scenario can specified setting target = c(\"mu\", \"lsd\", \"llambda\") (names target arguments) npar = c(2, 2, 1) (lengths target arguments):","code":"normal_mixture_llk <- function(data, mu, lsd, llambda) {   sd <- exp(lsd)   lambda <- plogis(llambda)   c1 <- lambda * dnorm(data, mu[1], sd[1])   c2 <- (1 - lambda) * dnorm(data, mu[2], sd[2])   sum(log(c1 + c2)) } ao(   f = normal_mixture_llk,   initial = runif(5),   target = c(\"mu\", \"lsd\", \"llambda\"),   npar = c(2, 2, 1),   data = datasets::faithful$eruptions,   partition = \"random\",   minimize = FALSE )"},{"path":"https://loelschlaeger.de/ao/articles/ao.html","id":"parameter-bounds","dir":"Articles","previous_headings":"How to use the package? > More flexibility","what":"Parameter bounds","title":"Alternating optimization","text":"Instead using parameter transformations normal_mixture_llk() function , parameter bounds can specified via arguments lower upper, can either single number (common bound parameters) vector specific bounds per parameter. Therefore, straightforward implementation mixture example :","code":"normal_mixture_llk <- function(mu, sd, lambda, data) {   c1 <- lambda * dnorm(data, mu[1], sd[1])   c2 <- (1 - lambda) * dnorm(data, mu[2], sd[2])   sum(log(c1 + c2)) } ao(   f = normal_mixture_llk,   initial = runif(5),   target = c(\"mu\", \"sd\", \"lambda\"),   npar = c(2, 2, 1),   data = datasets::faithful$eruptions,   partition = \"random\",   minimize = FALSE,   lower = c(-Inf, -Inf, 0, 0, 0),   upper = c(Inf, Inf, Inf, Inf, 1) )"},{"path":"https://loelschlaeger.de/ao/articles/ao.html","id":"custom-parameter-partition","dir":"Articles","previous_headings":"How to use the package? > More flexibility","what":"Custom parameter partition","title":"Alternating optimization","text":"Say parameters Gaussian mixture model supposed grouped type: 𝐱1=(μ1,μ2),𝐱2=(σ1,σ2),𝐱3=(λ).\\mathbf{x}_1 = (\\mu_1, \\mu_2),\\ \\mathbf{x}_2 = (\\sigma_1, \\sigma_2),\\ \\mathbf{x}_3 = (\\lambda). ao(), custom parameter partitions can specified setting partition = list(1:2, 3:4, 5), .e. defining list element corresponds parameter block, containing vector parameter indices. Parameter indices can members number blocks.","code":""},{"path":"https://loelschlaeger.de/ao/articles/ao.html","id":"stopping-criteria","dir":"Articles","previous_headings":"How to use the package? > More flexibility","what":"Stopping criteria","title":"Alternating optimization","text":"Currently, four different stopping criteria AO process implemented: predefined iteration limit exceeded (via iteration_limit argument) predefined time limit exceeded (via seconds_limit argument) absolute change function value comparison last iteration falls predefined threshold (via tolerance_value argument) change parameters comparison last iteration falls predefined threshold (via tolerance_parameter argument, parameter distance computed via norm specified tolerance_parameter_norm) number stopping criteria can activated deactivated5, final output contains information criterium caused termination.","code":""},{"path":"https://loelschlaeger.de/ao/articles/ao.html","id":"base-optimizer","dir":"Articles","previous_headings":"How to use the package? > More flexibility","what":"Base optimizer","title":"Alternating optimization","text":"default, L-BFGS-B algorithm (Byrd et al. 1995) implemented stats::optim used solving sub-problems numerically. However, optimizer can selected specifying base_optimizer argument. optimizer must defined framework provided optimizeR package, see documentation details. example, stats::nlm optimizer can selected setting base_optimizer = Optimizer$new(\"stats::nlm\").","code":""},{"path":"https://loelschlaeger.de/ao/articles/ao.html","id":"multiple-processes","dir":"Articles","previous_headings":"How to use the package? > More flexibility","what":"Multiple processes","title":"Alternating optimization","text":"AO can suffer local optima. increase likelihood reaching global optimum, users can specify multiple starting parameters, multiple parameter partitions, multiple base optimizers. Use initial, partition, /base_optimizer arguments provide list possible values parameter. combination initial values, parameter partitions, base optimizers create separate AO process: case multiple processes, output provides information best process (respect function value) well information every single process. default, processes run sequentially. However, since independent , can parallelized. parallel computation, ao supports {future} framework. example, run following ao() call: using multiple processes, setting verbose = TRUE print tracing details AO supported. However, progress processes can still tracked using {progressr} framework. example, run following ao() call:","code":"normal_mixture_llk <- function(mu, sd, lambda, data) {   c1 <- lambda * dnorm(data, mu[1], sd[1])   c2 <- (1 - lambda) * dnorm(data, mu[2], sd[2])   sum(log(c1 + c2)) } out <- ao(   f = normal_mixture_llk,   initial = list(runif(5), runif(5)),   target = c(\"mu\", \"sd\", \"lambda\"),   npar = c(2, 2, 1),   data = datasets::faithful$eruptions,   partition = list(\"random\", \"random\", \"random\"),   minimize = FALSE,   lower = c(-Inf, -Inf, 0, 0, 0),   upper = c(Inf, Inf, Inf, Inf, 1) ) names(out) #>  [1] \"estimate\"         \"estimates\"        \"value\"            \"values\"           #>  [5] \"details\"          \"seconds\"          \"seconds_each\"     \"stopping_reason\"  #>  [9] \"stopping_reasons\" \"processes\" out$values #> [[1]] #> [1] -421.417 #>  #> [[2]] #> [1] -421.417 #>  #> [[3]] #> [1] -276.36 #>  #> [[4]] #> [1] -597.2553 #>  #> [[5]] #> [1] -421.417 #>  #> [[6]] #> [1] -421.417 future::plan(future::multisession, workers = 4) progressr::handlers(global = TRUE) progressr::handlers(   progressr::handler_progress(\":percent :eta :message\") )"},{"path":[]},{"path":"https://loelschlaeger.de/ao/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lennart Oelschläger. Author, maintainer. Siddhartha Chib. Contributor.","code":""},{"path":"https://loelschlaeger.de/ao/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Oelschläger L (2025). ao: Alternating Optimization. R package version 1.2.0.9000, https://loelschlaeger.de/ao/.","code":"@Manual{,   title = {ao: Alternating Optimization},   author = {Lennart Oelschläger},   year = {2025},   note = {R package version 1.2.0.9000},   url = {https://loelschlaeger.de/ao/}, }"},{"path":"https://loelschlaeger.de/ao/index.html","id":"alternating-optimization-","dir":"","previous_headings":"","what":"Alternating Optimization","title":"Alternating Optimization","text":"ao package implements alternating optimization (AO) R.","code":""},{"path":"https://loelschlaeger.de/ao/index.html","id":"why","dir":"","previous_headings":"","what":"Why?","title":"Alternating Optimization","text":"AO iterative process optimizes function alternately performing restricted optimization parameter subsets. Instead joint optimization, breaks optimization problem simpler sub-problems. approach can make optimization feasible joint optimization difficult. See package vignette details.","code":""},{"path":"https://loelschlaeger.de/ao/index.html","id":"how","dir":"","previous_headings":"","what":"How?","title":"Alternating Optimization","text":"can install released package version CRAN : load package via library(\"ao\") ready go. simple example alternating minimization Rosenbrock function: resulting optimization path …  … obtained follows:","code":"install.packages(\"ao\") rosenbrock <- function(x) (1 - x[1])^2 + (x[2] - x[1]^2)^2 ao(f = rosenbrock, initial = c(2, 2)) #> $estimate #> [1] 1.000895 1.001791 #>  #> $value #> [1] 8.016137e-07 #>  #> $details #>    iteration        value       p1       p2 b1 b2     seconds #> 1          0 5.000000e+00 2.000000 2.000000  0  0 0.000000000 #> 2          1 1.519238e-01 1.366025 2.000000  1  0 0.004212141 #> 3          1 1.339744e-01 1.366025 1.866024  0  1 0.002035141 #> 4          2 1.176778e-01 1.320824 1.866024  1  0 0.002771139 #> 5          2 1.029278e-01 1.320824 1.744575  0  1 0.001895189 #> 6          3 8.966402e-02 1.278883 1.744575  1  0 0.004005909 #> 7          3 7.777546e-02 1.278883 1.635540  0  1 0.002469063 #> 8          4 6.719114e-02 1.240415 1.635540  1  0 0.002768040 #> 9          4 5.779955e-02 1.240415 1.538630  0  1 0.003015041 #> 10         5 4.952339e-02 1.205560 1.538630  1  0 0.002884865 #> 11         5 4.225482e-02 1.205560 1.453374  0  1 0.001970053 #> 12         6 3.591491e-02 1.174366 1.453374  1  0 0.002742052 #> 13         6 3.040344e-02 1.174366 1.379135  0  1 0.001869917 #> 14         7 2.564430e-02 1.146792 1.379135  1  0 0.002977848 #> 15         7 2.154801e-02 1.146792 1.315133  0  1 0.002017021 #> 16         8 1.804492e-02 1.122712 1.315133  1  0 0.003154993 #> 17         8 1.505832e-02 1.122712 1.260483  0  1 0.001919985 #> 18         9 1.252724e-02 1.101923 1.260483  1  0 0.003431082 #> 19         9 1.038836e-02 1.101923 1.214235  0  1 0.001927137 #> 20        10 8.590837e-03 1.084167 1.214235  1  0 0.008159876 #> 21        10 7.084101e-03 1.084167 1.175418  0  1 0.001954079 #> 22        11 5.827377e-03 1.069149 1.175418  1  0 0.007063150 #> 23        11 4.781578e-03 1.069149 1.143079  0  1 0.001844168 #> 24        12 3.915156e-03 1.056558 1.143079  1  0 0.006755829 #> 25        12 3.198754e-03 1.056558 1.116314  0  1 0.002441883 #> 26        13 2.608707e-03 1.046082 1.116314  1  0 0.018714190 #> 27        13 2.123531e-03 1.046082 1.094287  0  1 0.001847982 #> 28        14 1.725945e-03 1.037424 1.094287  1  0 0.002268076 #> 29        14 1.400576e-03 1.037424 1.076249  0  1 0.002501965 #> 30        15 1.135093e-03 1.030310 1.076249  1  0 0.002749205 #> 31        15 9.187038e-04 1.030310 1.061539  0  1 0.001985073 #> 32        16 7.427825e-04 1.024492 1.061539  1  0 0.003801823 #> 33        16 5.998755e-04 1.024492 1.049585  0  1 0.003378153 #> 34        17 4.840462e-04 1.019754 1.049585  1  0 0.005733967 #> 35        17 3.902161e-04 1.019754 1.039898  0  1 0.001929998 #> 36        18 3.143566e-04 1.015907 1.039898  1  0 0.002388000 #> 37        18 2.530454e-04 1.015907 1.032068  0  1 0.001893997 #> 38        19 2.035803e-04 1.012794 1.032068  1  0 0.002493143 #> 39        19 1.636760e-04 1.012794 1.025751  0  1 0.002291918 #> 40        20 1.315375e-04 1.010279 1.025751  1  0 0.002350807 #> 41        20 1.056496e-04 1.010279 1.020663  0  1 0.001892805 #> 42        21 8.482978e-05 1.008251 1.020663  1  0 0.002317905 #> 43        21 6.807922e-05 1.008251 1.016570  0  1 0.001904011 #> 44        22 5.462405e-05 1.006619 1.016570  1  0 0.002228022 #> 45        22 4.380882e-05 1.006619 1.013281  0  1 0.001803875 #> 46        23 3.513011e-05 1.005307 1.013281  1  0 0.003870964 #> 47        23 2.815916e-05 1.005307 1.010641  0  1 0.002097845 #> 48        24 2.257018e-05 1.004252 1.010641  1  0 0.002288103 #> 49        24 1.808332e-05 1.004252 1.008523  0  1 0.001908779 #> 50        25 1.448872e-05 1.003406 1.008523  1  0 0.002306938 #> 51        25 1.160399e-05 1.003406 1.006825  0  1 0.001830101 #> 52        26 9.294548e-06 1.002728 1.006825  1  0 0.002260208 #> 53        26 7.441548e-06 1.002728 1.005463  0  1 0.002681017 #> 54        27 5.959072e-06 1.002184 1.005463  1  0 0.002296925 #> 55        27 4.769667e-06 1.002184 1.004373  0  1 0.001475811 #> 56        28 3.818729e-06 1.001748 1.004373  1  0 0.002235174 #> 57        28 3.055717e-06 1.001748 1.003499  0  1 0.001893997 #> 58        29 2.446111e-06 1.001399 1.003499  1  0 0.002182007 #> 59        29 1.956863e-06 1.001399 1.002800  0  1 0.001785994 #> 60        30 1.566279e-06 1.001119 1.002800  1  0 0.002191067 #> 61        30 1.252688e-06 1.001119 1.002240  0  1 0.001884937 #> 62        31 1.002554e-06 1.000895 1.002240  1  0 0.002276897 #> 63        31 8.016137e-07 1.000895 1.001791  0  1 0.001425982 #>  #> $seconds #> [1] 0.1816533 #>  #> $stopping_reason #> [1] \"change in function value between 1 iteration is < 1e-06\""},{"path":"https://loelschlaeger.de/ao/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact?","title":"Alternating Optimization","text":"questions, found bug, need feature, just file issue GitHub.","code":""},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Object — Process","title":"Process Object — Process","text":"object specifies AO process.","code":""},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Process Object — Process","text":"npar [integer(1)] (total) length target argument(s). partition [character(1) | list()] Defines parameter partition, can either \"sequential\" treating parameter separately, \"random\" random partition iteration, \"none\" partition (equivalent joint optimization), list vectors parameter indices, specifying custom partition AO process. new_block_probability [numeric(1)] relevant partition = \"random\". probability new parameter block creating random partition. Values close 0 result larger parameter blocks, values close 1 result smaller parameter blocks. minimum_block_number [integer(1)] relevant partition = \"random\". minimum number blocks random partitions. verbose [logical(1)] Print tracing details AO process? minimize [logical(1)] Minimize AO process? FALSE, maximization performed. iteration_limit [integer(1) | Inf] maximum number iterations parameter partition AO process terminated. Can also Inf iteration limit. seconds_limit [numeric(1)] time limit seconds AO process terminated. Can also Inf time limit. Note stopping criteria checked sub-problem solved within solving sub-problem, actual process time can exceed limit. tolerance_value [numeric(1)] non-negative tolerance value. AO process terminates absolute difference current function value one tolerance_history iterations smaller tolerance_value. Can 0 value threshold. tolerance_parameter [numeric(1)] non-negative tolerance value. AO process terminates distance current estimate tolerance_history iterations smaller tolerance_parameter. Can 0 parameter threshold. default, distance measured using euclidean norm, another norm can specified via tolerance_parameter_norm field. tolerance_parameter_norm [function] norm measures distance current estimate one last iteration. distance smaller tolerance_parameter, AO process terminated. must form function(x, y) two vector inputs x y, return single numeric value. default, euclidean norm function(x, y) sqrt(sum((x - y)^2)) used. tolerance_history [integer(1)] number iterations look back determine whether tolerance_value tolerance_parameter reached. add_details [logical(1)] Add details AO process output? iteration [integer(1)] current iteration number. block [integer()] currently active parameter block, represented parameter indices. output [list(), read-] output AO process, list following elements: estimate parameter vector termination. value function value termination. details data.frame full information AO process. iteration (column iteration) contains function value (column value), parameter values (columns starting p followed parameter index), active parameter block (columns starting b followed parameter index, 1 stands parameter contained active parameter block 0 ), computation times seconds (column seconds). available add_details = TRUE. seconds overall computation time seconds. stopping_reason message AO process terminated.","code":""},{"path":[]},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Process Object — Process","text":"Process$new() Process$print_status() Process$initialize_details() Process$update_details() Process$get_partition() Process$get_details() Process$get_value() Process$get_value_latest() Process$get_value_best() Process$get_parameter() Process$get_parameter_latest() Process$get_parameter_best() Process$get_seconds() Process$get_seconds_total() Process$check_stopping()","code":""},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Process Object — Process","text":"Creates new object R6 class.","code":""},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Object — Process","text":"","code":"Process$new(   npar = integer(),   partition = \"sequential\",   new_block_probability = 0.3,   minimum_block_number = 1,   verbose = FALSE,   minimize = TRUE,   iteration_limit = Inf,   seconds_limit = Inf,   tolerance_value = 1e-06,   tolerance_parameter = 1e-06,   tolerance_parameter_norm = function(x, y) sqrt(sum((x - y)^2)),   tolerance_history = 1,   add_details = TRUE )"},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Object — Process","text":"npar [integer(1)] (total) length target argument(s). partition [character(1) | list()] Defines parameter partition, can either \"sequential\" treating parameter separately, \"random\" random partition iteration, \"none\" partition (equivalent joint optimization), list vectors parameter indices, specifying custom partition AO process. new_block_probability [numeric(1)] relevant partition = \"random\". probability new parameter block creating random partition. Values close 0 result larger parameter blocks, values close 1 result smaller parameter blocks. minimum_block_number [integer(1)] relevant partition = \"random\". minimum number blocks random partitions. verbose [logical(1)] Print tracing details AO process? minimize [logical(1)] Minimize AO process? FALSE, maximization performed. iteration_limit [integer(1) | Inf] maximum number iterations parameter partition AO process terminated. Can also Inf iteration limit. seconds_limit [numeric(1)] time limit seconds AO process terminated. Can also Inf time limit. Note stopping criteria checked sub-problem solved within solving sub-problem, actual process time can exceed limit. tolerance_value [numeric(1)] non-negative tolerance value. AO process terminates absolute difference current function value one tolerance_history iterations smaller tolerance_value. Can 0 value threshold. tolerance_parameter [numeric(1)] non-negative tolerance value. AO process terminates distance current estimate tolerance_history iterations smaller tolerance_parameter. Can 0 parameter threshold. default, distance measured using euclidean norm, another norm can specified via tolerance_parameter_norm field. tolerance_parameter_norm [function] norm measures distance current estimate one last iteration. distance smaller tolerance_parameter, AO process terminated. must form function(x, y) two vector inputs x y, return single numeric value. default, euclidean norm function(x, y) sqrt(sum((x - y)^2)) used. tolerance_history [integer(1)] number iterations look back determine whether tolerance_value tolerance_parameter reached. add_details [logical(1)] Add details AO process output?","code":""},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"method-print-status-","dir":"Reference","previous_headings":"","what":"Method print_status()","title":"Process Object — Process","text":"Prints status message.","code":""},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Object — Process","text":"","code":"Process$print_status(message, message_type = 8, verbose = self$verbose)"},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Object — Process","text":"message [character(1)] status message. message_type [integer(1)] message type, one following: 1 cli::cli_h1() 2 cli::cli_h2() 3 cli::cli_h3() 4 cli::cli_alert_success() 5 cli::cli_alert_info() 6 cli::cli_alert_warning() 7 cli::cli_alert_danger() 8 cli::cat_line() verbose [logical(1)] Print tracing details AO process?","code":""},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"method-initialize-details-","dir":"Reference","previous_headings":"","what":"Method initialize_details()","title":"Process Object — Process","text":"Initializes details part output.","code":""},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Object — Process","text":"","code":"Process$initialize_details(initial_parameter, initial_value)"},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Object — Process","text":"initial_parameter [numeric()] starting parameter values AO process. initial_value [numeric(1)] function value initial parameters.","code":""},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"method-update-details-","dir":"Reference","previous_headings":"","what":"Method update_details()","title":"Process Object — Process","text":"Updates details part output.","code":""},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Object — Process","text":"","code":"Process$update_details(   value,   parameter_block,   seconds,   error,   error_message,   block = self$block )"},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Object — Process","text":"value [numeric(1)] updated function value. parameter_block [numeric()] updated parameter values active parameter block. seconds [numeric(1)] time seconds solving sub-problem. error [logical(1)] solving sub-problem result error? error_message [character(1)] error message error = TRUE. block [integer()] currently active parameter block, represented parameter indices.","code":""},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"method-get-partition-","dir":"Reference","previous_headings":"","what":"Method get_partition()","title":"Process Object — Process","text":"Get parameter partition.","code":""},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Object — Process","text":"","code":"Process$get_partition()"},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"method-get-details-","dir":"Reference","previous_headings":"","what":"Method get_details()","title":"Process Object — Process","text":"Get details part output.","code":""},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Object — Process","text":"","code":"Process$get_details(   which_iteration = NULL,   which_block = NULL,   which_column = c(\"iteration\", \"value\", \"parameter\", \"block\", \"seconds\") )"},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Object — Process","text":"which_iteration [integer()] Selects iteration(s). Can also NULL select iterations. which_block [character(1) | integer()] Selects parameter block partition can one \"first\" first parameter block, \"last\" last parameter block, integer vector parameter indices, NULL parameter blocks. which_column [character()] Selects columns details part output can one \"iteration\", \"value\", \"parameter\", \"block\", \"seconds\".","code":""},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"method-get-value-","dir":"Reference","previous_headings":"","what":"Method get_value()","title":"Process Object — Process","text":"Get function value different steps AO process.","code":""},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Object — Process","text":"","code":"Process$get_value(   which_iteration = NULL,   which_block = NULL,   keep_iteration_column = FALSE,   keep_block_columns = FALSE )"},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Object — Process","text":"which_iteration [integer()] Selects iteration(s). Can also NULL select iterations. which_block [character(1) | integer()] Selects parameter block partition can one \"first\" first parameter block, \"last\" last parameter block, integer vector parameter indices, NULL parameter blocks. keep_iteration_column [logical(1)] Keep column containing information iteration output? keep_block_columns [logical(1)] Keep column containing information active parameter block output?","code":""},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"method-get-value-latest-","dir":"Reference","previous_headings":"","what":"Method get_value_latest()","title":"Process Object — Process","text":"Get function value latest step AO process.","code":""},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Object — Process","text":"","code":"Process$get_value_latest()"},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"method-get-value-best-","dir":"Reference","previous_headings":"","what":"Method get_value_best()","title":"Process Object — Process","text":"Get optimum function value AO process.","code":""},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Object — Process","text":"","code":"Process$get_value_best()"},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"method-get-parameter-","dir":"Reference","previous_headings":"","what":"Method get_parameter()","title":"Process Object — Process","text":"Get parameter values different steps AO process.","code":""},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Object — Process","text":"","code":"Process$get_parameter(   which_iteration = self$iteration,   which_block = NULL,   keep_iteration_column = FALSE,   keep_block_columns = FALSE )"},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Object — Process","text":"which_iteration [integer()] Selects iteration(s). Can also NULL select iterations. which_block [character(1) | integer()] Selects parameter block partition can one \"first\" first parameter block, \"last\" last parameter block, integer vector parameter indices, NULL parameter blocks. keep_iteration_column [logical(1)] Keep column containing information iteration output? keep_block_columns [logical(1)] Keep column containing information active parameter block output?","code":""},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"method-get-parameter-latest-","dir":"Reference","previous_headings":"","what":"Method get_parameter_latest()","title":"Process Object — Process","text":"Get parameter value latest step AO process.","code":""},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Object — Process","text":"","code":"Process$get_parameter_latest(parameter_type = \"full\")"},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Object — Process","text":"parameter_type [character(1)] Selects parameter type can one \"full\" (default) get full parameter vector, \"block\" get parameter values current block, .e., parameters indices self$block \"fixed\" get parameter values currently fixed, .e., except indices self$block","code":""},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"method-get-parameter-best-","dir":"Reference","previous_headings":"","what":"Method get_parameter_best()","title":"Process Object — Process","text":"Get optimum parameter value AO process.","code":""},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Object — Process","text":"","code":"Process$get_parameter_best(parameter_type = \"full\")"},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Object — Process","text":"parameter_type [character(1)] Selects parameter type can one \"full\" (default) get full parameter vector, \"block\" get parameter values current block, .e., parameters indices self$block \"fixed\" get parameter values currently fixed, .e., except indices self$block","code":""},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"method-get-seconds-","dir":"Reference","previous_headings":"","what":"Method get_seconds()","title":"Process Object — Process","text":"Get optimization time seconds different steps AO process.","code":""},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Object — Process","text":"","code":"Process$get_seconds(   which_iteration = NULL,   which_block = NULL,   keep_iteration_column = FALSE,   keep_block_columns = FALSE )"},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Object — Process","text":"which_iteration [integer()] Selects iteration(s). Can also NULL select iterations. which_block [character(1) | integer()] Selects parameter block partition can one \"first\" first parameter block, \"last\" last parameter block, integer vector parameter indices, NULL parameter blocks. keep_iteration_column [logical(1)] Keep column containing information iteration output? keep_block_columns [logical(1)] Keep column containing information active parameter block output?","code":""},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"method-get-seconds-total-","dir":"Reference","previous_headings":"","what":"Method get_seconds_total()","title":"Process Object — Process","text":"Get total optimization time seconds AO process.","code":""},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Object — Process","text":"","code":"Process$get_seconds_total()"},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"method-check-stopping-","dir":"Reference","previous_headings":"","what":"Method check_stopping()","title":"Process Object — Process","text":"Checks AO process can terminated.","code":""},{"path":"https://loelschlaeger.de/ao/reference/Process.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Object — Process","text":"","code":"Process$check_stopping()"},{"path":"https://loelschlaeger.de/ao/reference/ao-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ao: Alternating Optimization — ao-package","title":"ao: Alternating Optimization — ao-package","text":"iterative process optimizes function alternately performing restricted optimization parameter subsets. Instead joint optimization, breaks optimization problem simpler sub-problems. approach can make optimization feasible joint optimization difficult.","code":""},{"path":[]},{"path":"https://loelschlaeger.de/ao/reference/ao-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ao: Alternating Optimization — ao-package","text":"Maintainer: Lennart Oelschläger oelschlaeger.lennart@gmail.com (ORCID) contributors: Siddhartha Chib chib@wustl.edu [contributor]","code":""},{"path":"https://loelschlaeger.de/ao/reference/ao.html","id":null,"dir":"Reference","previous_headings":"","what":"Alternating Optimization — ao","title":"Alternating Optimization — ao","text":"Alternating optimization (AO) iterative process optimizing real-valued function jointly parameters alternating restricted optimization parameter partitions.","code":""},{"path":"https://loelschlaeger.de/ao/reference/ao.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alternating Optimization — ao","text":"","code":"ao(   f,   initial,   target = NULL,   npar = NULL,   gradient = NULL,   hessian = NULL,   ...,   partition = \"sequential\",   new_block_probability = 0.3,   minimum_block_number = 1,   minimize = TRUE,   lower = NULL,   upper = NULL,   iteration_limit = Inf,   seconds_limit = Inf,   tolerance_value = 1e-06,   tolerance_parameter = 1e-06,   tolerance_parameter_norm = function(x, y) sqrt(sum((x - y)^2)),   tolerance_history = 1,   base_optimizer = Optimizer$new(\"stats::optim\", method = \"L-BFGS-B\"),   verbose = FALSE,   hide_warnings = TRUE,   add_details = TRUE )"},{"path":"https://loelschlaeger.de/ao/reference/ao.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alternating Optimization — ao","text":"f [function] function optimized, returning single numeric value. first argument f numeric length initial, optionally followed arguments specified ... argument. f optimized argument first, one argument, specified via target argument. initial [numeric() | list()] starting parameter values target argument(s). can also list multiple starting parameter values, see details. target [character() | NULL] name(s) argument(s) f gets optimized. can numeric arguments. Can NULL (default), first argument f. npar [integer()] length(s) target argument(s). Must specified two target arguments specified via target argument. Can NULL one target argument, case npar set length(initial). gradient [function | NULL] Optionally function returns gradient f. function call gradient must identical f. Ignored base_optimizer support custom gradient. hessian [function | NULL] Optionally function returns Hessian f. function call hessian must identical f. Ignored base_optimizer support custom Hessian. ... Additional arguments passed f (gradient). partition [character(1) | list()] Defines parameter partition, can either \"sequential\" treating parameter separately, \"random\" random partition iteration, \"none\" partition (equivalent joint optimization), list vectors parameter indices, specifying custom partition AO process. can also list multiple partition definitions, see details. new_block_probability [numeric(1)] relevant partition = \"random\". probability new parameter block creating random partition. Values close 0 result larger parameter blocks, values close 1 result smaller parameter blocks. minimum_block_number [integer(1)] relevant partition = \"random\". minimum number blocks random partitions. minimize [logical(1)] Minimize AO process? FALSE, maximization performed. lower, upper [numeric() | NULL] Optionally lower upper parameter bounds. Ignored base_optimizer support parameter bounds. iteration_limit [integer(1) | Inf] maximum number iterations parameter partition AO process terminated. Can also Inf iteration limit. seconds_limit [numeric(1)] time limit seconds AO process terminated. Can also Inf time limit. Note stopping criteria checked sub-problem solved within solving sub-problem, actual process time can exceed limit. tolerance_value [numeric(1)] non-negative tolerance value. AO process terminates absolute difference current function value one tolerance_history iterations smaller tolerance_value. Can 0 value threshold. tolerance_parameter [numeric(1)] non-negative tolerance value. AO process terminates distance current estimate tolerance_history iterations smaller tolerance_parameter. Can 0 parameter threshold. default, distance measured using euclidean norm, another norm can specified via tolerance_parameter_norm argument. tolerance_parameter_norm [function] norm measures distance current estimate one last iteration. distance smaller tolerance_parameter, AO process terminated. must form function(x, y) two vector inputs x y, return single numeric value. default, euclidean norm function(x, y) sqrt(sum((x - y)^2)) used. tolerance_history [integer(1)] number iterations look back determine whether tolerance_value tolerance_parameter reached. base_optimizer [Optimizer | list()] Optimizer object, can created via Optimizer. numerically solves sub-problems. default, optim optimizer method = \"L-BFGS-B\" used. can also list multiple base optimizers, see details. verbose [logical(1)] Print tracing details AO process? supported using multiple processes, see details. hide_warnings [logical(1)] Hide warnings AO process? add_details [logical(1)] Add details AO process output?","code":""},{"path":"https://loelschlaeger.de/ao/reference/ao.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Alternating Optimization — ao","text":"list following elements: estimate parameter vector termination. value function value termination. details data.frame information AO process: iteration (column iteration) contains function value (column value), parameter values (columns starting p followed parameter index), active parameter block (columns starting b followed parameter index, 1 stands parameter contained active parameter block 0 ), computation times seconds (column seconds). available add_details = TRUE. seconds overall computation time seconds. stopping_reason message AO process terminated. case multiple processes, output changes slightly, see details.","code":""},{"path":[]},{"path":"https://loelschlaeger.de/ao/reference/ao.html","id":"multiple-processes","dir":"Reference","previous_headings":"","what":"Multiple processes","title":"Alternating Optimization — ao","text":"AO can suffer local optima. increase likelihood reaching global optimum, can specify: multiple starting parameters multiple parameter partitions multiple base optimizers Use initial, partition, /base_optimizer arguments provide list possible values parameter. combination initial values, parameter partitions, base optimizers create separate AO process.","code":""},{"path":"https://loelschlaeger.de/ao/reference/ao.html","id":"output-value","dir":"Reference","previous_headings":"","what":"Output value","title":"Alternating Optimization — ao","text":"case multiple processes, output values refer optimal (respect function value) AO processes. add_details = TRUE, following elements added: estimates list optimal parameters process. values list optimal function values process. details combines details single processes additional column process index different processes. seconds_each gives computation time seconds process. stopping_reasons gives termination message process. processes give details different processes specified.","code":""},{"path":"https://loelschlaeger.de/ao/reference/ao.html","id":"parallel-computation","dir":"Reference","previous_headings":"","what":"Parallel computation","title":"Alternating Optimization — ao","text":"default, processes run sequentially. However, since independent, can parallelized. enable parallel computation, use {future} framework. example, run following ao() call:","code":"future::plan(future::multisession, workers = 4)"},{"path":"https://loelschlaeger.de/ao/reference/ao.html","id":"progress-updates","dir":"Reference","previous_headings":"","what":"Progress updates","title":"Alternating Optimization — ao","text":"using multiple processes, setting verbose = TRUE print tracing details AO supported. However, can still track progress using {progressr} framework. example, run following ao() call:","code":"progressr::handlers(global = TRUE) progressr::handlers(   progressr::handler_progress(\":percent :eta :message\") )"},{"path":"https://loelschlaeger.de/ao/reference/ao.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Alternating Optimization — ao","text":"","code":"# Example 1: Minimization of Himmelblau's function --------------------------  himmelblau <- function(x) (x[1]^2 + x[2] - 11)^2 + (x[1] + x[2]^2 - 7)^2 ao(f = himmelblau, initial = c(0, 0)) #> $estimate #> [1]  3.584428 -1.848126 #>  #> $value #> [1] 9.606386e-12 #>  #> $details #>    iteration        value       p1        p2 b1 b2     seconds #> 1          0 1.700000e+02 0.000000  0.000000  0  0 0.000000000 #> 2          1 1.327270e+01 3.395691  0.000000  1  0 0.029929161 #> 3          1 1.743664e+00 3.395691 -1.803183  0  1 0.005084753 #> 4          2 2.847290e-02 3.581412 -1.803183  1  0 0.003878355 #> 5          2 4.687468e-04 3.581412 -1.847412  0  1 0.003504515 #> 6          3 7.368057e-06 3.584381 -1.847412  1  0 0.002986193 #> 7          3 1.164202e-07 3.584381 -1.848115  0  1 0.027847767 #> 8          4 1.893311e-09 3.584427 -1.848115  1  0 0.002520084 #> 9          4 9.153860e-11 3.584427 -1.848124  0  1 0.001846313 #> 10         5 6.347425e-11 3.584428 -1.848124  1  0 0.001850128 #> 11         5 9.606386e-12 3.584428 -1.848126  0  1 0.001845360 #>  #> $seconds #> [1] 0.08129263 #>  #> $stopping_reason #> [1] \"change in function value between 1 iteration is < 1e-06\" #>   # Example 2: Maximization of 2-class Gaussian mixture log-likelihood --------  # target arguments: # - class means mu (2, unrestricted) # - class standard deviations sd (2, must be non-negative) # - class proportion lambda (only 1 for identification, must be in [0, 1])  normal_mixture_llk <- function(mu, sd, lambda, data) {   c1 <- lambda * dnorm(data, mu[1], sd[1])   c2 <- (1 - lambda) * dnorm(data, mu[2], sd[2])   sum(log(c1 + c2)) }  set.seed(123)  ao(   f = normal_mixture_llk,   initial = runif(5),   target = c(\"mu\", \"sd\", \"lambda\"),   npar = c(2, 2, 1),   data = datasets::faithful$eruptions,   partition = list(\"sequential\", \"random\", \"none\"),   minimize = FALSE,   lower = c(-Inf, -Inf, 0, 0, 0),   upper = c(Inf, Inf, Inf, Inf, 1),   add_details = FALSE ) #> $estimate #> [1] 2.0186087 4.2733443 0.2356257 0.4370632 0.3484053 #>  #> $value #> [1] -276.36 #>  #> $seconds #> [1] 0.3547113 #>  #> $stopping_reason #> [1] \"change in function value between 1 iteration is < 1e-06\" #>"},{"path":"https://loelschlaeger.de/ao/news/index.html","id":"ao-120","dir":"Changelog","previous_headings":"","what":"ao 1.2.0","title":"ao 1.2.0","text":"CRAN release: 2025-04-25 Parameter bounds, analytical gradient Hessian now supported generally. Argument add_details = FALSE can used reduce information output.","code":""},{"path":"https://loelschlaeger.de/ao/news/index.html","id":"ao-111","dir":"Changelog","previous_headings":"","what":"ao 1.1.1","title":"ao 1.1.1","text":"case multiple AO processes, output now contains additional elements estimates values results processes.","code":""},{"path":"https://loelschlaeger.de/ao/news/index.html","id":"ao-110","dir":"Changelog","previous_headings":"","what":"ao 1.1.0","title":"ao 1.1.0","text":"CRAN release: 2024-07-13 AO can now run multiple (possibly parallel) processes providing list values initial, partition, /base_optimizer parameters, combination creates separate AO process.","code":""},{"path":"https://loelschlaeger.de/ao/news/index.html","id":"ao-101","dir":"Changelog","previous_headings":"","what":"ao 1.0.1","title":"ao 1.0.1","text":"Removed update_code output. Updates now accepted regardless whether improve function value. end, best solution returned. Added tolerance_history argument compare function value parameters one iteration. Added hide_warnings argument hide warnings AO process.","code":""},{"path":"https://loelschlaeger.de/ao/news/index.html","id":"ao-100","dir":"Changelog","previous_headings":"","what":"ao 1.0.0","title":"ao 1.0.0","text":"CRAN release: 2024-06-20 Implemented random partitions, parameter bounds, new stopping criteria (iteration limit, time limit, change function value, change parameters). ao() API change lot, please check documentation.","code":""},{"path":"https://loelschlaeger.de/ao/news/index.html","id":"ao-033","dir":"Changelog","previous_headings":"","what":"ao 0.3.3","title":"ao 0.3.3","text":"CRAN release: 2024-02-29 Now using cli improve error messages.","code":""},{"path":"https://loelschlaeger.de/ao/news/index.html","id":"ao-032","dir":"Changelog","previous_headings":"","what":"ao 0.3.2","title":"ao 0.3.2","text":"CRAN release: 2024-02-05 Fixed #4 (thanks S. Chib).","code":""},{"path":"https://loelschlaeger.de/ao/news/index.html","id":"ao-031","dir":"Changelog","previous_headings":"","what":"ao 0.3.1","title":"ao 0.3.1","text":"CRAN release: 2024-01-31 Added package start -message. Added details README file. Increased required version optimizeR version 1.0.3.","code":""},{"path":"https://loelschlaeger.de/ao/news/index.html","id":"ao-030","dir":"Changelog","previous_headings":"","what":"ao 0.3.0","title":"ao 0.3.0","text":"CRAN release: 2023-11-08 Updated code new optimizeR version 1.0.1.","code":""},{"path":"https://loelschlaeger.de/ao/news/index.html","id":"ao-027","dir":"Changelog","previous_headings":"","what":"ao 0.2.7","title":"ao 0.2.7","text":"CRAN release: 2023-09-29 Renamed input print.level -> verbose. return value, renamed element \"time\" -> \"seconds\" (time now always seconds); \"sequence\" element. Additionally, added \"value\" column \"sequence\" element. Added input f_partition optionally specify functions partitions. Added input joint_end optionally optimize jointly end AO process. Input iterlim can Inf now. empty elements partition longer allowed. Removed plotting feature parameter updates estimation. New dependency checkmate input checks.","code":""},{"path":"https://loelschlaeger.de/ao/news/index.html","id":"ao-026","dir":"Changelog","previous_headings":"","what":"ao 0.2.6","title":"ao 0.2.6","text":"CRAN release: 2023-03-31 Added package logo created package website (https://loelschlaeger.de/ao/) {pkgdown} package. code changes.","code":""},{"path":"https://loelschlaeger.de/ao/news/index.html","id":"ao-025","dir":"Changelog","previous_headings":"","what":"ao 0.2.5","title":"ao 0.2.5","text":"CRAN release: 2023-01-23 Updated code new optimizeR version 0.3.0, renamed changed input output names. particular, ao(), renamed input optimizer -> base_optimizer. Fixed bug using numerical gradient /Hessian target function.","code":""},{"path":"https://loelschlaeger.de/ao/news/index.html","id":"ao-024","dir":"Changelog","previous_headings":"","what":"ao 0.2.4","title":"ao 0.2.4","text":"CRAN release: 2022-12-04 Updated code new optimizeR version 0.2.0, renamed functions.","code":""},{"path":"https://loelschlaeger.de/ao/news/index.html","id":"ao-023","dir":"Changelog","previous_headings":"","what":"ao 0.2.3","title":"ao 0.2.3","text":"CRAN release: 2022-09-02 Fixed bugs ... arguments ao().","code":""},{"path":"https://loelschlaeger.de/ao/news/index.html","id":"ao-022","dir":"Changelog","previous_headings":"","what":"ao 0.2.2","title":"ao 0.2.2","text":"CRAN release: 2022-08-24 Removed set_f() interface. optimization problem now specified directly ao(). output format ao() changed, see documentation ao(). Arbitrary optimizer can now specified ao() optimizer object via framework {optimizeR} package. Removed utils functions ao. imported optimizeR package.","code":""},{"path":"https://loelschlaeger.de/ao/news/index.html","id":"ao-021","dir":"Changelog","previous_headings":"","what":"ao 0.2.1","title":"ao 0.2.1","text":"CRAN release: 2022-01-04 Himmelblau’s function included example.","code":""},{"path":"https://loelschlaeger.de/ao/news/index.html","id":"ao-020","dir":"Changelog","previous_headings":"","what":"ao 0.2.0","title":"ao 0.2.0","text":"ao() now returns sequence estimates different iterations data frame. ao() now able plot sequence estimates estimation. Argument groups ao() now called partition sequence replaced iterations. New function set_f() specification optimization problem. Parameter constraints can now imposed target function. New helper functions is_number(), try_silent(), timed() euclidean(). Included vignette details alternating optimization. New package sticker.","code":""},{"path":"https://loelschlaeger.de/ao/news/index.html","id":"ao-014","dir":"Changelog","previous_headings":"","what":"ao 0.1.4","title":"ao 0.1.4","text":"CRAN release: 2021-10-06 Updated package metadata. Updated package sticker.","code":""},{"path":"https://loelschlaeger.de/ao/news/index.html","id":"ao-013","dir":"Changelog","previous_headings":"","what":"ao 0.1.3","title":"ao 0.1.3","text":"CRAN release: 2021-08-12 Exported method print.ao().","code":""},{"path":"https://loelschlaeger.de/ao/news/index.html","id":"ao-012","dir":"Changelog","previous_headings":"","what":"ao 0.1.2","title":"ao 0.1.2","text":"CRAN release: 2021-08-10 Skip alternation optimization step group empty. Estimation times now returned always seconds. Return stats::nlm() outputs. Implemented method print.ao().","code":""},{"path":"https://loelschlaeger.de/ao/news/index.html","id":"ao-011","dir":"Changelog","previous_headings":"","what":"ao 0.1.1","title":"ao 0.1.1","text":"CRAN release: 2021-06-30 Fixed minor bugs.","code":""},{"path":"https://loelschlaeger.de/ao/news/index.html","id":"ao-010","dir":"Changelog","previous_headings":"","what":"ao 0.1.0","title":"ao 0.1.0","text":"CRAN release: 2021-06-21 Initial release.","code":""}]
