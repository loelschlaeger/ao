% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/procedure.R
\name{Procedure}
\alias{Procedure}
\title{Procedure Object}
\description{
Details for alternating optimization procedure.
}
\examples{
Procedure$new(
  verbose = FALSE,
  minimize = TRUE,
  iteration_limit = 10,
  tolerance_value = 1e-6,
  tolerance_parameter = 1e-6
)

}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{verbose}}{(\code{logical(1)})\cr
Whether to print tracing details during the alternating optimization
process.}

\item{\code{minimize}}{(\code{logical(1)})\cr
Whether to minimize during the alternating optimization process.
If \code{FALSE}, maximization is performed.}

\item{\code{iteration_limit}}{(\code{integer(1)})\cr
The maximum number of iterations through the parameter partition before
the alternating optimization process is terminated.}

\item{\code{tolerance_value}}{(\code{numeric(1)})\cr
A non-negative tolerance value. The alternating optimization terminates
prematurely (i.e., before \code{iteration_limit} is reached) if the
absolute difference between the current function value and the one from
the last iteration is smaller than \code{tolerance_value}.}

\item{\code{tolerance_parameter}}{(\code{integer(1)})\cr
A non-negative tolerance value. The alternating optimization terminates
prematurely (i.e., before \code{iteration_limit} is reached) if the
distance between the current estimate and the one from the last
iteration is smaller than \code{tolerance_parameter}.
By default, the distance is measured with the euclidean norm, but the
norm can be specified via the \code{tolerance_parameter_norm} field.}

\item{\code{tolerance_parameter_norm}}{(\code{function})\cr
The norm that measures the distance between the current estimate and the
one from the last iteration. If the distance is smaller than
\code{tolerance_parameter}, the procedure is terminated.
It must be of the form \code{function(x, y)} for two vector inputs
\code{x} and \code{y}, and return a single \code{numeric} value.
By default, the euclidean norm \code{function(x, y) sqrt(sum((x - y)^2))}
is used.}

\item{\code{output}}{(\code{list()})\cr
The results of the alternating optimization procedure, contains
\itemize{
\item \code{"estimate"}, the parameter vector at termination,
\item \code{"value"}, the function value at termination,
\item \code{"details"}, a \code{data.frame} of the function values,
parameters and computation times in the single iterations,
\item \code{"seconds"}, the overall computation time in seconds.
}}

\item{\code{iteration}}{(\code{integer(1)})\cr
The current iteration number.}

\item{\code{block}}{(\code{integer()})\cr
The currently active parameter block, represented as parameter indices.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Procedure-new}{\code{Procedure$new()}}
\item \href{#method-Procedure-print}{\code{Procedure$print()}}
\item \href{#method-Procedure-status}{\code{Procedure$status()}}
\item \href{#method-Procedure-initialize_details}{\code{Procedure$initialize_details()}}
\item \href{#method-Procedure-update_details}{\code{Procedure$update_details()}}
\item \href{#method-Procedure-get_details}{\code{Procedure$get_details()}}
\item \href{#method-Procedure-get_value}{\code{Procedure$get_value()}}
\item \href{#method-Procedure-get_value_latest}{\code{Procedure$get_value_latest()}}
\item \href{#method-Procedure-get_parameter}{\code{Procedure$get_parameter()}}
\item \href{#method-Procedure-get_parameter_latest}{\code{Procedure$get_parameter_latest()}}
\item \href{#method-Procedure-get_seconds}{\code{Procedure$get_seconds()}}
\item \href{#method-Procedure-check_stopping}{\code{Procedure$check_stopping()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Procedure-new"></a>}}
\if{latex}{\out{\hypertarget{method-Procedure-new}{}}}
\subsection{Method \code{new()}}{
Creates a new object of this \link[R6:R6Class]{R6} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Procedure$new(
  verbose = FALSE,
  minimize = TRUE,
  iteration_limit = 10,
  tolerance_value = 1e-06,
  tolerance_parameter = 1e-06
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{verbose}}{(\code{logical(1)})\cr
Print tracing details during the alternating optimization process?}

\item{\code{minimize}}{(\code{logical(1)})\cr
Perform minimization? Alternatively, maximization is performed.}

\item{\code{iteration_limit}}{(\code{integer(1)})\cr
The maximum number of iterations through the parameter partition before the
alternating optimization process is terminated. Can also be \code{Inf}.}

\item{\code{tolerance_value}}{(\code{numeric(1)})\cr
A non-negative tolerance value. The alternating optimization terminates
prematurely (i.e., before \code{iteration_limit} is reached) if the absolute
difference between the current function value and the one from the last
iteration is smaller than \code{tolerance_value}.}

\item{\code{tolerance_parameter}}{(\code{numeric(1)})\cr
A non-negative tolerance value. The alternating optimization terminates
prematurely (i.e., before \code{iteration_limit} is reached) if the euclidean
distance between the current estimate and the one from the last iteration is
smaller than \code{tolerance_parameter}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Procedure-print"></a>}}
\if{latex}{\out{\hypertarget{method-Procedure-print}{}}}
\subsection{Method \code{print()}}{
Print details about this object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Procedure$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Procedure-status"></a>}}
\if{latex}{\out{\hypertarget{method-Procedure-status}{}}}
\subsection{Method \code{status()}}{
Prints a status message.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Procedure$status(message, verbose = self$verbose)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{message}}{(\code{character(1)})\cr
The status message.}

\item{\code{verbose}}{(\code{logical(1)})\cr
Print tracing details during the alternating optimization process?}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Procedure-initialize_details"></a>}}
\if{latex}{\out{\hypertarget{method-Procedure-initialize_details}{}}}
\subsection{Method \code{initialize_details()}}{
TODO
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Procedure$initialize_details(initial, value, npar)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{initial}}{TODO}

\item{\code{value}}{TODO}

\item{\code{npar}}{TODO}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Procedure-update_details"></a>}}
\if{latex}{\out{\hypertarget{method-Procedure-update_details}{}}}
\subsection{Method \code{update_details()}}{
TODO
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Procedure$update_details(value, parameter_block, seconds, block = self$block)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{TODO}

\item{\code{parameter_block}}{TODO}

\item{\code{seconds}}{TODO}

\item{\code{block}}{TODO}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Procedure-get_details"></a>}}
\if{latex}{\out{\hypertarget{method-Procedure-get_details}{}}}
\subsection{Method \code{get_details()}}{
TODO
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Procedure$get_details(
  which_iteration = NULL,
  which_block = NULL,
  which_column = c("iteration", "value", "seconds", "parameter", "block")
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Procedure-get_value"></a>}}
\if{latex}{\out{\hypertarget{method-Procedure-get_value}{}}}
\subsection{Method \code{get_value()}}{
Get the function value in different steps of the alternating optimization
procedure.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Procedure$get_value(
  which_iteration = NULL,
  which_block = NULL,
  keep_iteration_column = FALSE,
  keep_block_columns = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{which_iteration}}{(\code{integer()})\cr
Selects the iteration(s).
Can also be \code{NULL} to select all iterations.}

\item{\code{which_block}}{(\code{character(1)} or \code{integer()})\cr
Selects the parameter block in the partition and can be one of
\itemize{
\item \code{"first"} for the first parameter block,
\item \code{"last"} for the last parameter block,
\item an \code{integer} vector of parameter indices,
\item or \code{NULL} for all parameter blocks.
}}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Procedure-get_value_latest"></a>}}
\if{latex}{\out{\hypertarget{method-Procedure-get_value_latest}{}}}
\subsection{Method \code{get_value_latest()}}{
Get the function value in the latest step of the alternating
optimization procedure.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Procedure$get_value_latest()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Procedure-get_parameter"></a>}}
\if{latex}{\out{\hypertarget{method-Procedure-get_parameter}{}}}
\subsection{Method \code{get_parameter()}}{
Get the parameter values in different steps of the alternating
optimization procedure.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Procedure$get_parameter(
  which_iteration = self$iteration,
  which_block = NULL,
  keep_iteration_column = FALSE,
  keep_block_columns = FALSE
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Procedure-get_parameter_latest"></a>}}
\if{latex}{\out{\hypertarget{method-Procedure-get_parameter_latest}{}}}
\subsection{Method \code{get_parameter_latest()}}{
Get the parameter value in the latest step of the alternating
optimization procedure.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Procedure$get_parameter_latest(parameter_type = "full")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{parameter_type}}{(\code{character(1)})\cr
Can be one of
\itemize{
\item \code{"full"} (default) to get the full parameter vector,
\item \code{"block"} to get the parameter values for the current block,
i.e., the parameters with the indices \code{self$block}
\item \code{"fixed"} to get the parameter values which are currently fixed,
i.e., all except for those with the indices \code{self$block}
}}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Procedure-get_seconds"></a>}}
\if{latex}{\out{\hypertarget{method-Procedure-get_seconds}{}}}
\subsection{Method \code{get_seconds()}}{
TODO
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Procedure$get_seconds(
  which_iteration = self$iteration,
  which_block = NULL,
  keep_iteration_column = FALSE,
  keep_block_columns = FALSE
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Procedure-check_stopping"></a>}}
\if{latex}{\out{\hypertarget{method-Procedure-check_stopping}{}}}
\subsection{Method \code{check_stopping()}}{
Checks if the alternating optimization procedure can be terminated.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Procedure$check_stopping(
  iteration_limit = self$iteration_limit,
  tolerance_value = self$tolerance_value,
  tolerance_parameter = self$tolerance_parameter,
  tolerance_parameter_norm = self$tolerance_parameter_norm,
  verbose = self$verbose
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{iteration_limit}}{(\code{integer(1)})\cr
The maximum number of iterations through the parameter partition before the
alternating optimization process is terminated. Can also be \code{Inf}.}

\item{\code{tolerance_value}}{(\code{numeric(1)})\cr
A non-negative tolerance value. The alternating optimization terminates
prematurely (i.e., before \code{iteration_limit} is reached) if the absolute
difference between the current function value and the one from the last
iteration is smaller than \code{tolerance_value}.}

\item{\code{tolerance_parameter}}{(\code{numeric(1)})\cr
A non-negative tolerance value. The alternating optimization terminates
prematurely (i.e., before \code{iteration_limit} is reached) if the euclidean
distance between the current estimate and the one from the last iteration is
smaller than \code{tolerance_parameter}.}

\item{\code{verbose}}{(\code{logical(1)})\cr
Print tracing details during the alternating optimization process?}
}
\if{html}{\out{</div>}}
}
}
}
